name: PR Comment

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:
  comment:
    name: Add PR Comment
    runs-on: ubuntu-latest
    if: github.event.workflow_run.event == 'pull_request'
    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const runId = context.payload.workflow_run.id;
            const runUrl = `https://github.com/${owner}/${repo}/actions/runs/${runId}`;
            const success = context.payload.workflow_run.conclusion === 'success';
            
            // Get PR number from workflow run
            const pullRequests = context.payload.workflow_run.pull_requests;
            if (!pullRequests || pullRequests.length === 0) {
              console.log('No associated pull requests found');
              return;
            }
            
            const prNumber = pullRequests[0].number;
            
            const emoji = success ? '✅' : '❌';
            const status = success ? 'passed' : 'failed';
            
            const comment = `${emoji} CI checks ${status} for this PR.
            
            [View workflow run](${runUrl})
            
            | Check | Status |
            |-------|--------|
            | Lint | ${success ? '✅' : '❌'} |
            | Build | ${success ? '✅' : '❌'} |
            | Test | ${success ? '✅' : '❌'} |
            | Coverage | ${success ? '✅' : '❌'} |`;
            
            // Check if we already commented
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('CI checks')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: prNumber,
                body: comment
              });
            }