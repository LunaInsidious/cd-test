name: Release Workspaces

on:
  push:
    paths:
      - '.cdtools/*-*.json'

permissions:
  contents: write
  packages: write

jobs:
  analyze-workspaces:
    name: Analyze Workspaces to Release
    runs-on: ubuntu-latest
    outputs:
      npm-matrix: ${{ steps.analyze.outputs.npm-matrix }}
      docker-matrix: ${{ steps.analyze.outputs.docker-matrix }}
      has-npm: ${{ steps.analyze.outputs.has-npm }}
      has-docker: ${{ steps.analyze.outputs.has-docker }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
      - name: Analyze workspaces from branch info
        id: analyze
        run: |
          # Auto-detect branch info file from current branch
          CURRENT_BRANCH=$(git branch --show-current)
          BRANCH_INFO_FILE=".cdtools/$(echo $CURRENT_BRANCH | sed 's/[^a-zA-Z0-9]/-/g' | sed 's/--*/-/g').json"

          # If not found, try to find any branch info file with workspaceUpdated
          if [ ! -f "$BRANCH_INFO_FILE" ]; then
            BRANCH_INFO_FILE=$(find .cdtools -name "*-*.json" -exec grep -l "workspaceUpdated" {} \; | head -1)
          fi

          if [ ! -f "$BRANCH_INFO_FILE" ]; then
            echo "‚ùå Branch info file not found: $BRANCH_INFO_FILE"
            echo "üîç Available branch info files:"
            ls -la .cdtools/*-*.json 2>/dev/null || echo "  None found"
            exit 1
          fi

          echo "üìã Using branch info file: $BRANCH_INFO_FILE"

          # Load config.json to get registry information
          CONFIG_FILE=".cdtools/config.json"
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "‚ùå Config file not found: $CONFIG_FILE"
            exit 1
          fi

          # Extract workspaceUpdated from branch info
          WORKSPACE_UPDATED=$(node -e "
            const branchInfo = JSON.parse(require('fs').readFileSync('$BRANCH_INFO_FILE', 'utf-8'));
            const config = JSON.parse(require('fs').readFileSync('$CONFIG_FILE', 'utf-8'));

            if (!branchInfo.workspaceUpdated) {
              console.log('{}');
              process.exit(0);
            }

            const npmWorkspaces = [];
            const dockerWorkspaces = [];

            for (const [workspacePath, version] of Object.entries(branchInfo.workspaceUpdated)) {
              const project = config.projects.find(p => p.path === workspacePath);
              if (!project) continue;

              const workspaceInfo = { workspace_path: workspacePath, workspace_version: version };

              if (project.registries.includes('npm')) {
                npmWorkspaces.push(workspaceInfo);
              }

              if (project.registries.includes('docker')) {
                dockerWorkspaces.push(workspaceInfo);
              }
            }

            console.log(JSON.stringify({
              npm: npmWorkspaces,
              docker: dockerWorkspaces
            }));
          ")

          NPM_MATRIX=$(echo "$WORKSPACE_UPDATED" | node -e "
            const data = JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf-8'));
            console.log(JSON.stringify({ include: data.npm }));
          ")

          DOCKER_MATRIX=$(echo "$WORKSPACE_UPDATED" | node -e "
            const data = JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf-8'));
            console.log(JSON.stringify({ include: data.docker }));
          ")

          HAS_NPM=$(echo "$WORKSPACE_UPDATED" | node -e "
            const data = JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf-8'));
            console.log(data.npm.length > 0 ? 'true' : 'false');
          ")

          HAS_DOCKER=$(echo "$WORKSPACE_UPDATED" | node -e "
            const data = JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf-8'));
            console.log(data.docker.length > 0 ? 'true' : 'false');
          ")

          echo "npm-matrix=$NPM_MATRIX" >> "$GITHUB_OUTPUT"
          echo "docker-matrix=$DOCKER_MATRIX" >> "$GITHUB_OUTPUT"
          echo "has-npm=$HAS_NPM" >> "$GITHUB_OUTPUT"
          echo "has-docker=$HAS_DOCKER" >> "$GITHUB_OUTPUT"

          echo "üîç Analysis complete:"
          echo "  NPM workspaces: $HAS_NPM"
          echo "  Docker workspaces: $HAS_DOCKER"
          echo "  NPM matrix: $NPM_MATRIX"
          echo "  Docker matrix: $DOCKER_MATRIX"

  check-workflows:
    name: Check Available Workflows
    runs-on: ubuntu-latest
    outputs:
      has-npm-workflow: ${{ steps.check.outputs.has-npm-workflow }}
      has-docker-workflow: ${{ steps.check.outputs.has-docker-workflow }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Check workflow files
        id: check
        run: |
          if [ -f ".github/workflows/publish-npm.yml" ]; then
            echo "has-npm-workflow=true" >> "$GITHUB_OUTPUT"
            echo "‚úÖ NPM workflow found"
          else
            echo "has-npm-workflow=false" >> "$GITHUB_OUTPUT"
            echo "‚ö†Ô∏è  NPM workflow not found"
          fi

          if [ -f ".github/workflows/publish-container-image.yml" ]; then
            echo "has-docker-workflow=true" >> "$GITHUB_OUTPUT"
            echo "‚úÖ Docker workflow found"
          else
            echo "has-docker-workflow=false" >> "$GITHUB_OUTPUT"
            echo "‚ö†Ô∏è  Docker workflow not found"
          fi

  publish-npm:
    name: Publish NPM Packages
    needs: [analyze-workspaces, check-workflows]
    if: ${{ needs.analyze-workspaces.outputs.has-npm == 'true' && needs.check-workflows.outputs.has-npm-workflow == 'true' }}
    strategy:
      matrix: ${{ fromJson(needs.analyze-workspaces.outputs.npm-matrix) }}
      fail-fast: false
    uses: ./.github/workflows/publish-npm.yml
    with:
      workspace_path: ${{ matrix.workspace_path }}
      workspace_version: ${{ matrix.workspace_version }}
    secrets: inherit

  publish-docker:
    name: Publish Docker Images
    needs: [analyze-workspaces, check-workflows]
    if: ${{ needs.analyze-workspaces.outputs.has-docker == 'true' && needs.check-workflows.outputs.has-docker-workflow == 'true' }}
    strategy:
      matrix: ${{ fromJson(needs.analyze-workspaces.outputs.docker-matrix) }}
      fail-fast: false
    uses: ./.github/workflows/publish-container-image.yml
    with:
      workspace_path: ${{ matrix.workspace_path }}
      workspace_version: ${{ matrix.workspace_version }}
    secrets: inherit

  release-summary:
    name: Release Summary
    needs: [analyze-workspaces, check-workflows, publish-npm, publish-docker]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Release Summary
        run: |
          echo "üéâ Release summary:"
          echo ""
          echo "üìã Workspace analysis:"
          echo "  - NPM workspaces found: ${{ needs.analyze-workspaces.outputs.has-npm }}"
          echo "  - Docker workspaces found: ${{ needs.analyze-workspaces.outputs.has-docker }}"
          echo ""
          echo "üìÑ Workflow availability:"
          echo "  - NPM workflow available: ${{ needs.check-workflows.outputs.has-npm-workflow }}"
          echo "  - Docker workflow available: ${{ needs.check-workflows.outputs.has-docker-workflow }}"
          echo ""

          # Check if NPM publish was skipped due to missing workflow
          if [ "${{ needs.analyze-workspaces.outputs.has-npm }}" = "true" ] && [ "${{ needs.check-workflows.outputs.has-npm-workflow }}" = "false" ]; then
            echo "‚ö†Ô∏è  NPM packages were found but publish-npm.yml workflow is missing!"
          fi

          # Check if Docker publish was skipped due to missing workflow
          if [ "${{ needs.analyze-workspaces.outputs.has-docker }}" = "true" ] && [ "${{ needs.check-workflows.outputs.has-docker-workflow }}" = "false" ]; then
            echo "‚ö†Ô∏è  Docker images were found but publish-container-image.yml workflow is missing!"
          fi

          # Check for actual failures
          if [ "${{ needs.publish-npm.result }}" = "failure" ] || [ "${{ needs.publish-docker.result }}" = "failure" ]; then
            echo ""
            echo "‚ùå Some releases failed. Please check the logs above."
            exit 1
          fi

          # Success message
          if [ "${{ needs.publish-npm.result }}" = "success" ] || [ "${{ needs.publish-docker.result }}" = "success" ]; then
            echo ""
            echo "‚úÖ All configured releases completed successfully!"
          elif [ "${{ needs.analyze-workspaces.outputs.has-npm }}" = "false" ] && [ "${{ needs.analyze-workspaces.outputs.has-docker }}" = "false" ]; then
            echo ""
            echo "‚ÑπÔ∏è  No workspaces were configured for release."
          else
            echo ""
            echo "‚ÑπÔ∏è  Release completed. Some workspaces were skipped due to missing workflows."
          fi
